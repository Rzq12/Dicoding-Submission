# -*- coding: utf-8 -*-
"""Submission.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_BSiT-dXv4z2eOz1TaxUPNsr-S1b-OD0
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier

"""# IMPORT DATA"""

df = pd.read_excel('Data/obesitas smote.xlsx')

"""# EDA"""

df.describe()

categorical_features = ['Gender', 'family_history_with_overweight', 'FAVC', 'CAEC', 'SMOKE', 'SCC', 'CALC', 'MTRANS', 'NObeyesdad']

for column in categorical_features:
    if column != 'Age':
        print(df[column].value_counts())
        print()

"""# TRANSFORM KATEGORIK KE NUMERIK"""

for col in categorical_features:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])

X = df.drop('NObeyesdad', axis=1)
y = df['NObeyesdad']

"""# NORMALISASI DATA"""

scaler = StandardScaler()
X = scaler.fit_transform(X)

"""# SPLIT DATA"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# MODEL ML YANG DIGUNAKAN"""

models = {
    "Decision Tree": DecisionTreeClassifier(max_depth= 50, min_samples_split= 2),
    "Gradient Boosting": GradientBoostingClassifier(learning_rate= 0.5, max_depth= 7, n_estimators= 200)
}

"""#  MELATIH MODEL"""

results = []

for model_name, model in models.items():
    scores = cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')
    model.fit(X_train, y_train)
    y_train_pred = model.predict(X_train)
    train_accuracy = accuracy_score(y_train, y_train_pred)
    y_pred = model.predict(X_test)
    test_accuracy = accuracy_score(y_test, y_pred)

    report = classification_report(y_test, y_pred, output_dict=True)['weighted avg']
    results.append({
        'Model': model_name,
        'CV Mean Accuracy': scores.mean(),
        'Test Accuracy': test_accuracy,
        'Train Accuracy': train_accuracy,
        'Precision': report['precision'],
        'Recall': report['recall'],
        'F1-Score': report['f1-score']
    })


results_df = pd.DataFrame(results)

"""# RESULT"""

results_df